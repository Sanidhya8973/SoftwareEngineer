-----------------------------------------------------------------------------------------------------------------------------------------------------------
> @Scope Annotation i.e. Beans Scope Inside Spring Framework
-----------------------------------------------------------------------------------------------------------------------------------------------------------
There are 5 types of Beans Scope inside Spring Framework:-
- Singleton   - Request   - Application
- Prototype   - Session
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------
[1] @Scope(BeanDefinition.SCOPE_SINGLETON)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
- Singleton is the default scope of a bean inside Spring Framework.
- In this scope, for a single bean we always get the same instance when we refer to or autowire inside our application.
- Unlike Singleton Design Pattern where we have only 1 instance in the entire app, inside Scope; Spring will make sure to have only 1 instance per unique bean.
- For example, if we have multiple beans of the same type, then Spring Singleton Scope will maintain 1 instance per each bean declared of the same type.
- Use Cases Of Singleton Beans Scope:-
  1) Since the same instance of a singleton bean will be used by multiple threads inside your application, it is very important that these beans are immutable.
  2) Singleton Scope is more suitable for beans which handles service layer, repository layer business logic.
- Points To Remember:-
  1) Building mutable singleton beans will result in race conditions inside multithreaded environments.
  2) There are ways to avoid race conditions due to mutable singleton beans with the help of synchronization and locking.
  3) But it is not recommended, since it brings a lot of complexity and performance issues inside your app. So, please don’t try to build mutable singleton beans.
- Example Code:-
  var context = new AnnotationConfigApplicationContext(ProjectConfig.class);
  Vehicle carObj1 = context.getBean(“vehicle1”, Vehicle.class);
  Vehicle carObj2 = context.getBean(“vehicle1”, Vehicle.class);
  Vehicle carObj3 = context.getBean(“vehicle2”, Vehicle.class);
  String carHash1 = carObj1.hashCode();
  String carHash2 = carObj2.hashCode();
  String carHash3 = carObj3.hashCode();
  if (carHash1 = = carHash2) {
     System.out.println(“> Singleton Scope”);
  }
  if (carHash1 ! = carHash3 || carHash2 ! = carHash3) {
     System.out.println(“> There is only 1 instance for multiple beans of same type.”);
  }
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------
[2] @Scope(BeanDefinition.SCOPE_PROTOTYPE)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
- It is
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------
[3] @Scope(BeanDefinition.SCOPE_REQUEST)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
- It is
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------
[4] @Scope(BeanDefinition.SCOPE_SESSION)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
- It is
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------
[5] @Scope(BeanDefinition.SCOPE_APPLICATION)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
- It is
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------
> Race Condition
-----------------------------------------------------------------------------------------------------------------------------------------------------------
- A race condition occurs when two threads access a shared variable/resource at the same time.
- The first thread reads the variable, and the second thread reads the same value from the variable.
- Then the first thread and second thread perform their operations on the value and they race to see which thread can write the value last to the shared variable.
- The value of the thread that writes its value last is preserved, because the thread is writing over the value that the previous thread wrote.
- In Singleton Beans Scope, a race condition occurs when we implement Singleton Scope of Bean incorrectly.
  - If we have a single object instance for our entire application and multiple threads at multiple places inside our application,
    they are trying to access it.
  - There is a good chance we will end up in this kind of race conditions.
  - So it’s our responsibility as a developer, whatever beans that we are choosing as a Singleton Beans Scope,
    there is no data related to application or correction or deletion happening inside these beans.
  - In Java, we used to avoid this race condition is with synchronization and locking which adds unnecessary complexity to handle inside Spring applications.
- Example Code:-
  // if both the threads run the if condition at the same time, then both of them will
  // reserve the table for different users.
  Map<String, String> reservedTables = new HashMap()<>; // Shared Value Inside An Object
  // Thread - 1
  if (!reservedTables.containsKey(“table-1”)) {
     reservedTables.put(“table-1”,”user-1”);
  }
  // Thread - 2
  if (!reservedTables.containsKey(“table-1”)) {
     reservedTables.put(“table-1”,”user-2”);
  }
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------
> Eager Instantiation
-----------------------------------------------------------------------------------------------------------------------------------------------------------
- By Default Spring Framework Supports Eager Instantiation.
- By default Spring will create all Singleton Beans eagerly during the startup of the application itself.
  This is called Eager Instantiation.
- In this type, the instance of the singleton class is created eagerly during the class loading process, regardless of whether it is needed or not.
  The instance is created as soon as the class is loaded, and it is readily available for use.
  Eager initialization is suitable when the singleton instance is lightweight, and its creation is not resource intensive.
- The advantage of Eager Initialization is that it guarantees the availability of the singleton instance throughout the program's execution.
  However, it may consume resources even if the instance is not immediately needed. So, it is important to consider the resource usage and performance implications when using this approach.
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------
> Lazy Instantiation
-----------------------------------------------------------------------------------------------------------------------------------------------------------
- When we change the default behavior to initialize the Singleton Beans LAZILY only when the application is trying to refer to the bean.
  This is called Lazy Instantiation.
- In this type, the instance of the singleton class is created only when it is required for the first time.
  The instance is not created during the class loading process. Lazy initialization is useful when the singleton instance creation is expensive or
  when it requires resources that should be allocated only when needed.
- The advantage of Lazy Initialization provides on-demand instance creation, which can save resources if the instance is not always required.
- Syntax:-
  @Component(value = “myclassbean”)
  @Lazy // add this annotation on the top of the class of which you want to create a bean
  public class MyClassBean {
     private String name;
     public void setName(String name) { this.name = name; }
     public String getName() { return name; }
  }
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------
|   |                     EAGER INSTANTIATION                      |   |                                LAZY INSTANTIATION                                |
-----------------------------------------------------------------------------------------------------------------------------------------------------------
| 1 | This is the default behavior inside Spring Framework.        | 1 | This is not a default behavior and needs to be configured explicitly using @LAZY.|
| 2 | The singleton bean will be created during the startup of the | 2 | The singleton bean will be created when the application is trying to refer to    |
|   | application.                                                 |   | the bean for the first time.                                                     |
| 3 | The server will not start if bean is not able to be created  | 3 | Application will throw an exception runtime if bean creation is failed due to    |
|   | due to any dependent exceptions.                             |   | any dependent exceptions.                                                        |
| 4 | Spring context will occupy a lot of memory if we try to use  | 4 | The performance will be impacted if we try to use “lazy” for all beans inside    |
|   | "eager" for all beans inside an application.                 |   | an application.                                                                  |
| 5 | Eager can be followed for all the beans which are required   | 5 | Lazy can be followed for the beans that are used in a very remote scenario       |
|   | very commonly inside an application.                         |   | inside an application.                                                           |
-----------------------------------------------------------------------------------------------------------------------------------------------------------

